#!/usr/bin/env bash
set -o errexit
set -o pipefail
shopt -s extglob

FORCE=no
PRETEND=no
VERBOSE=no

RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
NOCOLOR='\e[39m'

if [ $# -eq 0 ]; then
	echo "Use -h option to display help. Available configurations are:"
	source "${BASH_SOURCE[0]}" -l
fi

while [[ $# -gt 0 ]]; do
	case "$1" in
		-h) # --help is captured by git
			cat <<-EOH
			Usage: git lconfig [options...] [configuration name] [git repository paths...]

			The command apply a configuration defined in ~/.gitlconfig to a list of git repositories.
			. will be used if no repository path is given.
			The first argument is considered as a configuration name only without the -c|--config option.

			Available options are:
			 -h                  display this help and exit
			 --help-ini          display help about the ~/.gitlconfig file syntax and exit
			 -l|--list           display the list of available configuration name and exit
			 -c|--config <name>  apply the configuration name provided in argument
			 -f|--force          replace existing configuration variables
			 --no-color          turn off colored output
			 -p|--pretend        only show what would be done on each repository path
			 -v|--verbose        display the configuration that will be applied

			EOH
			exit 0
			;;
		--help-ini)
			cat <<-EOH
			The file ~/.gitlconfig is an INI file with each section describing a custom git configuration.
			Each configuration item is of the form "git_var = value".

			Example:
			[config_name_1]
			user.name = user1
			user.email = mail1@mail.mail

			[config_name_2]
			user.name = user2
			user.email = mail2@mail.mail

			EOH
			exit 0
			;;
		-l|--list)
			if [[ -e ~/.gitlconfig ]]; then
				sed -nE 's/^[[:blank:]]*\[([^]]*)\][[:blank:]]*$/\1/p' < ~/.gitlconfig
			fi
			exit 0
			;;
		-c|--config) # rarely used but for the case one wants a configuration named as an existing option
			shift
			CONFIG_NAME="$1"
			;;
		-f|--force)
			FORCE=yes
			;;
		--no-color)
			RED=''
			GREEN=''
			YELLOW=''
			NOCOLOR=''
			;;
		-p|--pretend)
			PRETEND=yes
			;;
		-v|--verbose)
			VERBOSE=yes
			;;
		*)
			if [[ -z "${CONFIG_NAME+x}" ]]; then
				CONFIG_NAME="$1"
				shift
			fi
			break
			;;
	esac
	shift
done

declare -A CONFIG
eval "$(gawk -v config="${CONFIG_NAME}" -f - ~/.gitlconfig <<-'EOP'
BEGIN {
keep = 0
}

$0 ~ "^[[:blank:]]*\\[" config "\\][[:blank:]]*$" {
keep = 1
next
}

/^[[:blank:]]*\[[^]]*\][[:blank:]]*$/ {
keep = 0
next
}

match($0, /^[[:blank:]]*([^[:blank:]]*)[[:blank:]]*=[[:blank:]]*(.*)$/, group) {
if ( keep ) {
	printf "CONFIG[\"%s\"]=\"%s\"; ", group[1], group[2]
}
}
EOP
)"

if [[ "${VERBOSE}" = "yes" ]]; then
	echo "Configuration used:"
	for name in "${!CONFIG[@]}"; do
		echo " - ${name} = ${CONFIG[${name}]}"
	done
fi

function lconfig_set() {
	local name="$1"
	local value="$2"
	local current
	if [[ ( "${FORCE}" = "yes"  ) ]] || ! current="$(git config --local --get "${name}" 2>/dev/null)"; then
		if [[ "${PRETEND}" != "yes" ]]; then
			git config "${name}" "${value}"
		fi
		echo -ne " ${GREEN}${name}[${value}]${NOCOLOR}"
		return 0
	else
		echo -ne " ${RED}!${name}[${current}]${NOCOLOR}"
		return 1
	fi
}

function lconfig() {
	local git_path="${1%/.git?(/)}"
	local exitcode=0
	if pushd "${git_path}" >& /dev/null; then
		if git status "${git_path}" >& /dev/null; then
			echo -n "${git_path}:"
			for name in "${!CONFIG[@]}"; do
				lconfig_set "${name}" "${CONFIG[${name}]}" || exitcode=1
			done
			echo
		else
			echo -e "${YELLOW}${git_path} ignored: not a git repository${NOCOLOR}" >&2
		fi
		popd >& /dev/null
	else
		echo -e "${YELLOW}${git_path} ignored: cannot change directory${NOCOLOR}" >&2
	fi
	return ${exitcode}
}

if [ $# -eq 0 ]; then
	lconfig .
else
	EXITCODE=0
	while [ $# -gt 0 ]; do
		lconfig $1 || EXITCODE=1
		shift
	done
	exit ${EXITCODE}
fi
